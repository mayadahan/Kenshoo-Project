'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _tmp2 = require('tmp');

var _tmp3 = _interopRequireDefault(_tmp2);

var _promisifyFunction = require('promisify-function');

var _promisifyFunction2 = _interopRequireDefault(_promisifyFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const _file = (0, _promisifyFunction2.default)(_tmp3.default.file);
const _dir = (0, _promisifyFunction2.default)(_tmp3.default.dir);
const tmpName = (0, _promisifyFunction2.default)(_tmp3.default.tmpName);

module.exports = {
  file: () => _file().then(_ref => {
    var _ref2 = _slicedToArray(_ref, 3);

    let path = _ref2[0];
    let fd = _ref2[1];
    let cleanupCallback = _ref2[2];
    return {
      path: path, fd: fd, cleanupCallback: cleanupCallback
    };
  }),
  fileSync: _tmp3.default.fileSync,
  dir: () => _dir().then(_ref3 => {
    var _ref4 = _slicedToArray(_ref3, 2);

    let path = _ref4[0];
    let cleanupCallback = _ref4[1];
    return {
      path: path, cleanupCallback: cleanupCallback
    };
  }),
  dirSync: _tmp3.default.dirSync,
  tmpName: tmpName,
  tmpNameSync: _tmp3.default.tmpNameSync
};